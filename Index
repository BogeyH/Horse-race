<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Photo Finish — Horse Race Bets</title>
  <style>
    :root{
      --ink:#0b1f2a; --paper:#f8f5ef; --accent:#d43d3d; --muted:#6c6e70; --win:#1a7f37; --loss:#9b1c1c;
    }
    *{box-sizing:border-box}
    html,body{margin:0;height:100%;font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif;color:var(--ink);background:var(--paper)}
    button{font:inherit}
    .app{max-width:720px;margin:0 auto;min-height:100%;display:flex;flex-direction:column}
    header{position:sticky;top:0;z-index:5;background:linear-gradient(#fff0, #fff0 50%, var(--paper)), var(--paper);backdrop-filter:saturate(1.1) blur(4px);}
    .bar{display:flex;align-items:center;justify-content:space-between;padding:12px 16px;border-bottom:1px solid #e6e1d9}
    .balance{font-weight:700}
    .btn{display:inline-flex;align-items:center;justify-content:center;padding:12px 14px;border-radius:12px;border:1px solid #dcd7cf;background:white;cursor:pointer;transition:transform .02s ease-in-out,opacity .15s}
    .btn[disabled]{opacity:.55;cursor:not-allowed}
    .btn.primary{background:var(--ink);color:#fff;border-color:var(--ink)}
    .btn.cash{background:#fff;border-color:var(--accent);color:var(--accent)}
    .screen{padding:12px 12px 92px}
    .section-title{font-size:14px;text-transform:uppercase;letter-spacing:.04em;color:var(--muted);margin:10px 2px}
    /* Horses list */
    .horses{display:grid;grid-template-columns:1fr;gap:10px}
    @media(min-width:540px){.horses{grid-template-columns:1fr 1fr}}
    .card{display:grid;grid-template-columns:60px 1fr auto;gap:10px;align-items:center;padding:10px;border:1px solid #e6e1d9;border-radius:16px;background:white}
    .card.selected{outline:2px solid var(--ink)}
    .badge{font-weight:700;border:1px solid #e6e1d9;border-radius:10px;padding:6px 8px;min-width:70px;text-align:center}
    .odds{font-variant-numeric:tabular-nums}
    .hint{font-size:12px;color:var(--muted)}
    /* Chips */
    .chips{position:fixed;left:0;right:0;bottom:0;background:linear-gradient(180deg, #f8f5efc9, var(--paper));border-top:1px solid #e6e1d9;padding:10px 12px;z-index:10}
    .chips-row{display:flex;gap:8px;flex-wrap:wrap}
    .chips .bet-amt{flex:1;min-width:90px}
    input[type="number"]{width:100%;padding:12px;border-radius:10px;border:1px solid #dcd7cf;background:white;font:inherit}
    .cta{display:flex;gap:10px;margin-top:10px}
    /* Track */
    .track-wrap{margin-top:8px;border:1px solid #e6e1d9;border-radius:16px;background:linear-gradient(#dff1ff 0 42%, #bdd8f3 42% 43%, #cce6cc 43%);}    
    .track{position:relative;overflow:hidden;border-radius:16px}
    .lane{display:flex;align-items:center;height:50px;border-top:1px dashed rgba(0,0,0,.06);position:relative}
    .lane:first-child{border-top:none}
    .finish{position:absolute;right:6px;top:0;bottom:0;width:4px;background:repeating-linear-gradient(180deg,#fff,#fff 8px,#222 8px,#222 16px);opacity:.85}
    .horse{position:absolute;left:8px;transition:transform .08s linear}
    .horse svg{display:block}
    .place-num{position:absolute;left:6px;top:50%;transform:translateY(-50%);font-size:12px;color:#0008;background:#fff6;padding:2px 6px;border-radius:8px}
    .timer{font-variant-numeric:tabular-nums;font-weight:700}
    /* Dialog */
    dialog{border:none;border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,.15);padding:16px;max-width:520px}
    dialog::backdrop{background:rgba(0,0,0,.35)}
    .result-win{color:var(--win)}
    .result-loss{color:var(--loss)}
    .sub{font-size:12px;color:var(--muted)}
    .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}
  </style>
</head>
<body>
  <div class="app" id="app">
    <header>
      <div class="bar">
        <div style="display:flex;gap:10px;align-items:center">
          <strong>Photo Finish</strong>
          <span class="timer" id="timer"></span>
        </div>
        <div class="balance">Balance: <span id="balance">—</span> credits</div>
      </div>
    </header><main class="screen" id="bet-screen" aria-live="polite">
  <div class="section-title">Pick a horse & enter your bet</div>
  <div class="horses" id="horse-list"></div>
  <p class="hint" id="prob-hint"></p>
</main>

<main class="screen" id="race-screen" hidden>
  <div class="section-title">Race — 20 seconds</div>
  <div class="track-wrap">
    <div class="track" id="track"></div>
  </div>
</main>

<div class="chips" id="chips">
  <div class="chips-row">
    <input class="bet-amt" type="number" min="1" step="1" id="bet-amount" placeholder="Bet amount (credits)" inputmode="numeric" />
    <button class="btn" data-chip="25">+25</button>
    <button class="btn" data-chip="50">+50</button>
    <button class="btn" data-chip="100">+100</button>
    <button class="btn" data-chip="500">+500</button>
    <button class="btn" data-chip="ALL">All-in</button>
  </div>
  <div class="cta">
    <button id="place-bet" class="btn primary" disabled>Place Bet</button>
    <button id="cash-out" class="btn cash">Cash Out</button>
  </div>
</div>

<dialog id="result-modal">
  <h3 id="result-title" style="margin:4px 0 8px"></h3>
  <div id="result-body" style="margin-bottom:12px"></div>
  <div class="sub" id="result-sub"></div>
  <div style="display:flex;gap:8px;justify-content:flex-end;margin-top:14px">
    <button class="btn" id="again">Next race</button>
    <button class="btn cash" id="modal-cash">Cash out</button>
  </div>
</dialog>

  </div><script>
(function(){
  const RACE_DURATION = 20000; // 20s
  const NUM_HORSES = 6;
  const START_BALANCE = 1000;
  const state = {
    balance: Number(localStorage.getItem('pf_balance')||START_BALANCE),
    horses: [],
    selectedIndex: null,
    bet: 0,
    odds: [], // decimal odds per horse
    winnerIndex: null,
    inRace:false
  };
  const el = id=>document.getElementById(id);
  const fmt = n=>Number(n).toLocaleString(undefined,{maximumFractionDigits:0});

  // --- Horse generation ---
  const ADJ = ["Midnight","Lucky","Crimson","Silver","Velvet","Rapid","Quiet","Neon","Maple","Royal","Rocket","Golden","Storm","River","Cinder"];
  const NOUN = ["Comet","Whisper","Dash","Valor","Charm","Rider","Phantom","Ember","Voyager","Blaze","Echo","Tempo","Spirit","Horizon","Mirage"];

  function randPick(arr){ return arr[Math.floor(Math.random()*arr.length)] }
  function uniqueNames(n){
    const set = new Set();
    while(set.size<n){ set.add(`${randPick(ADJ)} ${randPick(NOUN)}`) }
    return Array.from(set);
  }
  function svgHorse(color){
    // Simple inline SVG horse icon (stylized)
    return `<?xml version="1.0"?><svg width="56" height="40" viewBox="0 0 140 100" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
      <g fill="${color}" stroke="#222" stroke-width="2">
        <ellipse cx="60" cy="60" rx="36" ry="22"/>
        <circle cx="100" cy="58" r="16"/>
        <path d="M108 46 l18 -18 l8 8 l-12 14 z"/>
        <circle cx="112" cy="54" r="2" fill="#000"/>
        <rect x="20" y="70" width="14" height="18" rx="3"/>
        <rect x="58" y="72" width="14" height="18" rx="3"/>
        <rect x="94" y="72" width="14" height="18" rx="3"/>
      </g>
    </svg>`
  }
  const COLORS = ["#b22222","#1e90ff","#2e8b57","#8b4513","#8a2be2","#ff8c00","#708090"]; 

  function generateOdds(n){
    // Create fair-ish decimal odds between 1.5 and 9.0, normalize to a small house edge
    const raw = Array.from({length:n},()=> 1.2 + Math.random()*8 );
    // Sort to make a favorite
    raw.sort((a,b)=>a-b);
    // Round to 2 decimals and ensure min 1.5
    const odds = raw.map(v=>Math.max(1.5,Math.round(v*10)/10));
    return odds;
  }

  function weightedIndex(weights){
    const total = weights.reduce((a,b)=>a+b,0);
    let r = Math.random()*total;
    for(let i=0;i<weights.length;i++){ r-=weights[i]; if(r<=0) return i }
    return weights.length-1;
  }

  // --- UI rendering ---
  function renderLobby(){
    state.inRace=false; el('race-screen').hidden=true; el('bet-screen').hidden=false;
    const names = uniqueNames(NUM_HORSES);
    const odds = generateOdds(NUM_HORSES);
    const horses = names.map((name,i)=>({
      name,
      color: COLORS[i%COLORS.length],
      odds: odds[i]
    }));
    state.horses = horses; state.odds = odds; state.selectedIndex=null; state.bet=0;

    const list = el('horse-list'); list.innerHTML='';
    horses.forEach((h, i)=>{
      const card = document.createElement('button');
      card.className = 'card';
      card.type = 'button';
      card.setAttribute('aria-pressed','false');
      card.innerHTML = `
        <div class="horse-icon">${svgHorse(h.color)}</div>
        <div>
          <div style="font-weight:700">${h.name}</div>
          <div class="hint">Lane ${i+1}</div>
        </div>
        <div class="badge odds">${h.odds.toFixed(2)}x</div>
      `;
      card.addEventListener('click',()=>selectHorse(i, card));
      list.appendChild(card);
    });

    // Show implied favorite info
    const probs = odds.map(o=>1/o);
    const sum = probs.reduce((a,b)=>a+b,0);
    const implied = probs.map(p=>p/sum);
    const favIndex = implied.indexOf(Math.max(...implied));
    el('prob-hint').textContent = `Favorite: ${horses[favIndex].name} (~${Math.round(implied[favIndex]*100)}% implied)`;

    updateBalance();
    updateBetUI();
  }

  function selectHorse(i, card){
    state.selectedIndex = i;
    document.querySelectorAll('.card').forEach(c=>c.classList.remove('selected'));
    card.classList.add('selected');
    updateBetUI();
  }

  function updateBetUI(){
    el('place-bet').disabled = !(state.selectedIndex!==null && state.bet>0 && state.bet<=state.balance);
  }

  function updateBalance(){ el('balance').textContent = fmt(state.balance) }

  // --- Betting controls ---
  el('bet-amount').addEventListener('input', e=>{
    state.bet = Math.max(0, Math.floor(Number(e.target.value||0)));
    updateBetUI();
  });
  document.querySelectorAll('[data-chip]').forEach(btn=>{
    btn.addEventListener('click',()=>{
      const v = btn.dataset.chip;
      if(v==='ALL') state.bet = state.balance; else state.bet = Math.min(state.balance, (state.bet||0) + Number(v));
      el('bet-amount').value = state.bet;
      updateBetUI();
    })
  });

  // --- Place bet → race ---
  el('place-bet').addEventListener('click', ()=>{
    if(state.selectedIndex==null || state.bet<=0 || state.bet>state.balance) return;
    startRace();
  });

  el('cash-out').addEventListener('click', cashOut);
  el('modal-cash').addEventListener('click', cashOut);

  function cashOut(){
    localStorage.setItem('pf_balance', START_BALANCE); // reset for next session
    alert(`You cashed out with ${fmt(state.balance)} credits. Session will reset.`);
    state.balance = START_BALANCE; updateBalance(); renderLobby();
  }

  // --- Race simulation ---
  function startRace(){
    state.inRace=true;
    el('bet-screen').hidden=true; el('race-screen').hidden=false;

    // Pick winner weighted by probability 1/odds
    const weights = state.odds.map(o=>1/o);
    state.winnerIndex = weightedIndex(weights);

    // Build lanes
    const track = el('track'); track.innerHTML = '';
    const lanes = [];
    for(let i=0;i<state.horses.length;i++){
      const lane = document.createElement('div');
      lane.className = 'lane';
      const place = document.createElement('div'); place.className='place-num'; place.textContent = i+1;
      const runner = document.createElement('div'); runner.className='horse'; runner.innerHTML = svgHorse(state.horses[i].color);
      lane.appendChild(place); lane.appendChild(runner);
      track.appendChild(lane); lanes.push({lane, runner});
    }
    const finish = document.createElement('div'); finish.className='finish'; track.appendChild(finish);

    // Animate 20s with per-lane speed variations; ensure winner reaches 100%
    const start = performance.now();
    const ease = t=> t<.5 ? 2*t*t : -1+(4-2*t)*t; // smooth accel/decel
    const laneProfiles = state.horses.map((_,i)=>{
      const base = 0.82 + Math.random()*0.08; // most finish short of the line visually
      const bonus = i===state.winnerIndex ? 0.18 : (Math.random()*0.06); // winner crosses line
      const wobble = Array.from({length:6},()=> (Math.random()*.02));
      return {target: base+bonus, wobble};
    });

    // Timer
    const timer = el('timer');
    const tick = (now)=>{
      const elapsed = Math.min(RACE_DURATION, now-start);
      const t = elapsed / RACE_DURATION; // 0..1
      const s = ease(t);
      timer.textContent = ( (RACE_DURATION - elapsed)/1000 ).toFixed(1)+'s';

      lanes.forEach((L, i)=>{
        const p = laneProfiles[i];
        // small per-lane wobble simulating strides
        const wob = p.wobble.reduce((acc, w, idx)=> acc + w*Math.sin((t* (idx+1) * Math.PI*2)), 0);
        const progress = Math.min(1, (p.target * s + wob));
        const x = progress * (L.lane.clientWidth - 96); // keep SVG inside
        L.runner.style.transform = `translateX(${Math.max(8,x)}px)`;
      });

      if(elapsed < RACE_DURATION){
        requestAnimationFrame(tick);
      } else {
        timer.textContent = '';
        finishRace();
      }
    }
    requestAnimationFrame(tick);
  }

  function finishRace(){
    const betOnWinner = state.selectedIndex===state.winnerIndex;
    const odds = state.odds[state.selectedIndex];
    let delta = 0;
    if(betOnWinner){ delta = Math.floor(state.bet * odds); state.balance += delta; }
    else { delta = -state.bet; state.balance += delta; }
    localStorage.setItem('pf_balance', state.balance);
    updateBalance();

    const hWin = state.horses[state.winnerIndex];
    const modal = el('result-modal');
    el('result-title').textContent = betOnWinner ? 'Win!' : 'No luck this time';
    el('result-title').className = betOnWinner ? 'result-win' : 'result-loss';
    el('result-body').innerHTML = `
      <div style="display:flex;align-items:center;gap:10px">
        <div style="width:56px">${svgHorse(hWin.color)}</div>
        <div>
          <div style="font-weight:700">Winner: ${hWin.name}</div>
          <div class="sub">Odds: ${state.odds[state.winnerIndex].toFixed(2)}x</div>
        </div>
      </div>`;
    el('result-sub').textContent = betOnWinner
      ? `You won ${fmt(Math.abs(delta))} credits. New balance: ${fmt(state.balance)}.`
      : `You lost ${fmt(Math.abs(delta))} credits. New balance: ${fmt(state.balance)}.`;

    modal.showModal();
  }

  el('again').addEventListener('click',()=>{ el('result-modal').close(); renderLobby(); });

  // Init
  function ensureBalance(){
    if(!Number.isFinite(state.balance) || state.balance<=0){ state.balance = START_BALANCE; localStorage.setItem('pf_balance', state.balance); }
    updateBalance();
  }
  ensureBalance();
  renderLobby();
})();
</script></body>
</html>
